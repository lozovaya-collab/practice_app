{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"PingResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"login": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"login"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserNotAuthorized": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"User not authorized"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InternalServerErrorResponse": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Internal Server Error"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserValidateError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {
							"password": {
								"type": "boolean"
							},
							"login": {
								"type": "boolean"
							}
						},
						"required": [
							"password",
							"login"
						],
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserWithPassword.Exclude_keyofUserWithPassword.id__": {
				"properties": {
					"password": {
						"type": "string"
					},
					"login": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"login"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserWithPassword.id_": {
				"$ref": "#/components/schemas/Pick_UserWithPassword.Exclude_keyofUserWithPassword.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserCreateParams": {
				"$ref": "#/components/schemas/Omit_UserWithPassword.id_"
			},
			"UserAuthorizationFailed": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Authorization failed"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskStatuses": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QueryParamsValidateError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {},
						"additionalProperties": {
							"type": "boolean"
						},
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskStatusesValidateError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {
							"name": {
								"type": "boolean"
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TaskStatuses.Exclude_keyofTaskStatuses.id__": {
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TaskStatuses.id_": {
				"$ref": "#/components/schemas/Pick_TaskStatuses.Exclude_keyofTaskStatuses.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"TaskStatusesCreateParams": {
				"$ref": "#/components/schemas/Omit_TaskStatuses.id_"
			},
			"Task": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"status_id": {
						"type": "number",
						"format": "double"
					},
					"author_id": {
						"type": "number",
						"format": "double"
					},
					"created_date": {
						"type": "string"
					},
					"update_date": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"status_id",
					"author_id",
					"created_date",
					"update_date",
					"title",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskValidateError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {
							"status_id": {
								"type": "boolean"
							},
							"author_id": {
								"type": "boolean"
							},
							"description": {
								"type": "boolean"
							},
							"title": {
								"type": "boolean"
							},
							"id": {
								"type": "boolean"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TaskCreateParams.Exclude_keyofTaskCreateParams.author_id__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"status_id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"title",
					"description",
					"status_id"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TaskCreateParams.author_id_": {
				"$ref": "#/components/schemas/Pick_TaskCreateParams.Exclude_keyofTaskCreateParams.author_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_TaskUpdateParams.Exclude_keyofTaskUpdateParams.id__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status_id": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TaskUpdateParams.id_": {
				"$ref": "#/components/schemas/Pick_TaskUpdateParams.Exclude_keyofTaskUpdateParams.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "vkr",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/ping": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PingResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ping"
				],
				"security": [],
				"parameters": []
			}
		},
		"/users": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение всех пользователей",
				"summary": "get",
				"tags": [
					"User"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Создание пользователя",
				"summary": "create",
				"tags": [
					"Auth",
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCreateParams"
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/User"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение пользователей по id",
				"summary": "get By Id",
				"tags": [
					"User"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAuthorizationFailed"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Удаление пользователя. Удалить пользователя может только он сам",
				"summary": "delete",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAuthorizationFailed"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Авторизация",
				"summary": "login",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCreateParams"
							}
						}
					}
				}
			}
		},
		"/logout": {
			"post": {
				"operationId": "Logout",
				"responses": {
					"204": {
						"description": ""
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Выход",
				"summary": "logout",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": []
			}
		},
		"/me": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Профиль",
				"summary": "me",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "cookie",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/task-statuses": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TaskStatuses"
									},
									"type": "array"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение всех статусов",
				"summary": "get",
				"tags": [
					"TaskSatuses"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskStatuses"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskStatusesValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Создание статуса",
				"summary": "create",
				"tags": [
					"Auth",
					"TaskSatuses"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaskStatusesCreateParams"
							}
						}
					}
				}
			}
		},
		"/task-statuses/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/TaskStatuses"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/QueryParamsValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение статуса по id",
				"summary": "get By Id",
				"tags": [
					"TaskSatuses"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Удаление статуса",
				"summary": "delete",
				"tags": [
					"TaskSatuses"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/tasks": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Task"
									},
									"type": "array"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение всех задач с фильтрами",
				"summary": "get",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "author_id",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "number",
								"format": "double"
							}
						}
					},
					{
						"in": "query",
						"name": "status_id",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "number",
								"format": "double"
							}
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Task"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Создание задачу",
				"summary": "create",
				"tags": [
					"Tasks"
				],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "cookie",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_TaskCreateParams.author_id_"
							}
						}
					}
				}
			}
		},
		"/tasks/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Task"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Получение задачи по id",
				"summary": "get By Id",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"session": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Task"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotAuthorized"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAuthorizationFailed"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskValidateError"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Редактирование задачи",
				"summary": "update",
				"tags": [
					"Tasks"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "header",
						"name": "cookie",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_TaskUpdateParams.id_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAuthorizationFailed"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"description": "Удаление задачи. Удалить задачу может только он автор",
				"summary": "delete",
				"tags": [
					"Tasks"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "cookie",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}